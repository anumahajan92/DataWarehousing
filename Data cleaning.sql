DROP TABLE STAGING_EMPLOYEES   ;  
DROP TABLE STAGING_DEPARTMENTS ;  
DROP TABLE STAGING_JOBS        ;  
DROP TABLE STAGING_JOB_HISTORY ;  
DROP TABLE STAGING_REGIONS     ;  
DROP TABLE STAGING_COUNTRIES   ;  
DROP TABLE STAGING_LOCATIONS   ;  
DROP TABLE STAGING_CUSTOMERS   ;  
DROP TABLE STAGING_PRODUCTS    ;  
DROP TABLE STAGING_ORDERS      ;  
DROP TABLE STAGING_ORDER_ITEMS ;  
DROP TABLE STAGING_WAREHOUSES  ;  
DROP TABLE STAGING_INVENTORIES ;  
DROP TABLE STAGING_PROMOTIONS  ;  
 

CREATE TABLE STAGING_EMPLOYEES AS SELECT * FROM HOSALES.EMPLOYEES;
CREATE TABLE STAGING_DEPARTMENTS AS SELECT * FROM HOSALES.DEPARTMENTS;
CREATE TABLE STAGING_JOBS AS SELECT * FROM HOSALES.JOBS;
CREATE TABLE STAGING_JOB_HISTORY AS SELECT * FROM HOSALES.JOB_HISTORY;
CREATE TABLE STAGING_REGIONS AS SELECT * FROM HOSALES.REGIONS;
CREATE TABLE STAGING_COUNTRIES AS SELECT * FROM HOSALES.COUNTRIES;              -- DUPLICATES IN COUNTRIES
CREATE TABLE STAGING_LOCATIONS AS SELECT * FROM HOSALES.LOCATIONS;
CREATE TABLE STAGING_CUSTOMERS AS SELECT * FROM HOSALES.CUSTOMERS;              -- DUPLICATES IN CUSTOMERS
CREATE TABLE STAGING_PRODUCTS AS SELECT * FROM HOSALES.PRODUCTS;
CREATE TABLE STAGING_ORDERS AS SELECT * FROM HOSALES.ORDERS;                    -- DUPLICATES IN ORDERS
CREATE TABLE STAGING_ORDER_ITEMS AS SELECT * FROM HOSALES.ORDER_ITEMS;
CREATE TABLE STAGING_WAREHOUSES AS SELECT * FROM HOSALES.WAREHOUSES;
CREATE TABLE STAGING_INVENTORIES AS SELECT * FROM HOSALES.INVENTORIES;          -- DUPLICATES IN INVENTORIES
CREATE TABLE STAGING_PROMOTIONS AS SELECT * FROM HOSALES.PROMOTIONS;

-- DELETING THE DUPLICATES 

DELETE FROM STAGING_COUNTRIES WHERE ROWID IN (
SELECT ROWID FROM(
SELECT COUNTRY_ID, ROWID, ROW_NUMBER() OVER (PARTITION BY COUNTRY_ID,COUNTRY_NAME ORDER BY COUNTRY_ID DESC) AS RANKED FROM STAGING_COUNTRIES)
WHERE RANKED > 1);


DELETE FROM STAGING_CUSTOMERS WHERE ROWID IN (
SELECT ROWID FROM(
SELECT CUSTOMER_ID, ROWID, ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID  ORDER BY COUNTRY_ID DESC) AS RANKED FROM STAGING_CUSTOMERS)
WHERE RANKED > 1);

DELETE FROM STAGING_ORDERS WHERE ROWID IN (
SELECT ROWID FROM(
SELECT ORDER_ID, ROWID, ROW_NUMBER() OVER (PARTITION BY ORDER_ID  ORDER BY ORDER_ID DESC) AS RANKED FROM STAGING_ORDERS)
WHERE RANKED > 1);

DELETE FROM STAGING_INVENTORIES WHERE ROWID IN (
SELECT ROWID FROM(
SELECT PRODUCT_ID, WAREHOUSE_ID, ROWID, ROW_NUMBER() OVER (PARTITION BY PRODUCT_ID, WAREHOUSE_ID  ORDER BY PRODUCT_ID DESC) AS RANKED FROM STAGING_INVENTORIES)
WHERE RANKED > 1);

COMMIT;


--UPDATING RECORD IN EMPLOYEE TABLE SETTING DEPARTMENT ID FROM NULL TO 280
UPDATE STAGING_EMPLOYEES 
SET DEPARTMENT_ID=90
-- ANALYZING THE FACT TABLES FOR :- TOTAL ONLINE ORDERS, AVERAGE SALES, TOTAL SALARY, TOTAL EMPLOYEES, TOTAL CUSTOMER

-- VALIDATE SALES DATA
SELECT * FROM STAGING_ORDERS WHERE ORDER_MODE='online' AND ORDER_TOTAL = TOTAL_PRICE;  -- CORRECT
SELECT * FROM STAGING_ORDERS WHERE ORDER_MODE='online' AND ORDER_TOTAL <> TOTAL_PRICE; -- CORRECT

-- 3 DIRECT ORDERS HAD NO SALES REPRESENTATIVE ID, THEY ARE ONLINE ORDERS - HENCE UPDATED
UPDATE STAGING_ORDERS SET ORDER_MODE='online' WHERE ORDER_ID IN (
SELECT  ORDER_ID FROM STAGING_ORDERS WHERE ORDER_MODE='direct' and SALES_REP_ID is null );  -- UPDATED
COMMIT;

-- 2 ORDERS (2461,2462) HAVE NO ENTRIES IN ORDER_ITEMS - HENCE DELETED FROM ORDERS TABLE
SELECT * FROM STAGING_ORDERS WHERE ORDER_ID NOT IN (SELECT ORDER_id FROM STAGING_ORDER_ITEMS); -- DELETED
DELETE FROM STAGING_ORDERS WHERE ORDER_ID IN (2461,2462);

-- PRODUCT HAS NO DISCREPANCIES
SELECT * FROM STAGING_ORDER_ITEMS WHERE PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM STAGING_PRODUCTS);  -- CORRECT

-- VALIDATE THE DICSOUNTED PRICE IN ORDERS TABLE
SELECT A.ORDER_ID, SUM(A.UNIT_PRICE*A.QUANTITY) AS PRICE, NULL AS DATED
FROM STAGING_ORDER_ITEMS A WHERE A.ORDER_ID IN 
(SELECT B.ORDER_ID  FROM 
STAGING_ORDERS B WHERE B.PROMOTION_ID=1)
GROUP BY A.ORDER_ID
UNION 
SELECT B.ORDER_ID, B.TOTAL_PRICE, B.ORDER_DATE  
FROM 
STAGING_ORDERS B WHERE B.PROMOTION_ID = 1;

-- ORDER CREATION DATE IS NOT VALID FOR THE AVAILABLE PROPMOTION IN ORDER ID 2460
SELECT * FROM STAGING_PROMOTIONS WHERE ORDER_ID=2460;

-- UPDATE THE ORDER CREATED DATE TO SATISFY THE PROMOTION
UPDATE STAGING_ORDERS SET ORDER_DATE = (ORDER_DATE + 60) WHERE ORDER_ID=2460; -- UPDATED
SELECT * FROM STAGING_ORDERS WHERE ORDER_ID=2460;
COMMIT;

-- VALIDATE THE PRODUCT PRICE IN ORDER_ITEMS
SELECT * FROM (
SELECT
    A.ORDER_ID, A.PRODUCT_ID, A.UNIT_PRICE, B.LIST_PRICE,
    B.MIN_PRICE, CASE WHEN A.UNIT_PRICE <= B.LIST_PRICE AND A.UNIT_PRICE >= B.MIN_PRICE THEN 'VALID' ELSE 'INVALID' END AS FLAG
FROM
    STAGING_ORDER_ITEMS A,
    STAGING_PRODUCTS B
WHERE
    A.PRODUCT_ID = B.PRODUCT_ID) WHERE FLAG='INVALID';  -- IGNORE THE PRICE DATA
    
/*   
  ORDER_ID PRODUCT_ID UNIT_PRICE LIST_PRICE  MIN_PRICE FLAG   
---------- ---------- ---------- ---------- ---------- -------
      2427       2439        174        123        105 INVALID
      2414       3234         32         39         34 INVALID
      2442       2439        174        123        105 INVALID
      2383       2439        174        123        105 INVALID
      2426       3234         32         39         34 INVALID
      2404       2808          2          1          0 INVALID
*/


-- VALIDATE THE SALARY OF THE EMPLOYEES

SELECT * FROM (
SELECT
    A.EMPLOYEE_ID, A.JOB_ID,A.Commission_Pct,A.DEPARTMENT_ID, B.JOB_TITLE,A.SALARY, B.MIN_SALARY,B.MAX_SALARY,
    CASE WHEN A.SALARY <= B.MAX_SALARY AND A.SALARY >= B.MIN_SALARY THEN 'VALID' ELSE 'INVALID' END AS FLAG
FROM
    STAGING_EMPLOYEES A,
    STAGING_JOBS B
WHERE
    A.JOB_ID = B.JOB_ID) WHERE FLAG='INVALID';                                  -- UPDATED
    
-- RECTIFY THE DATA WITH CORRECT UPDATION
UPDATE STAGING_JOBS SET MAX_SALARY = 9000 WHERE JOB_ID = 'ST_MAN';
UPDATE STAGING_JOBS SET MAX_SALARY = 9500 WHERE JOB_ID = 'AC_ACCOUNT';
UPDATE STAGING_EMPLOYEES SET SALARY = 4800 WHERE EMPLOYEE_ID = 106;
COMMIT;   
/*
EMPLOYEE_ID JOB_ID     COMMISSION_PCT DEPARTMENT_ID JOB_TITLE                               SALARY MIN_SALARY MAX_SALARY FLAG   
----------- ---------- -------------- ------------- ----------------------------------- ---------- ---------- ---------- -------
        106 IT_PROG                              60 Programmer                               -4800       4000      10000 INVALID
        120 ST_MAN                               50 Stock Manager                             8000       5500       4500 INVALID
        121 ST_MAN                               50 Stock Manager                             8200       5500       4500 INVALID
        122 ST_MAN                               50 Stock Manager                             7900       5500       4500 INVALID
        123 ST_MAN                               50 Stock Manager                             6500       5500       4500 INVALID
        124 ST_MAN                               50 Stock Manager                             5800       5500       4500 INVALID
        206 AC_ACCOUNT                          110 Public Accountant                         9300       4200       9000 INVALID

7 rows selected. 
*/

-- CHECK THE EMPLOYEES BY COUNTRY AND LOCATION 
SELECT A.EMPLOYEE_ID,C.COUNTRY_ID,C.CITY FROM STAGING_EMPLOYEES A, STAGING_DEPARTMENTS B, STAGING_LOCATIONS C,STAGING_COUNTRIES D 
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID AND B.LOCATION_ID = C.LOCATION_ID AND D.COUNTRY_ID=C.COUNTRY_ID;  -- all fine
-- CHECK THE CUSTOMERS BY CREDIT AND LCOATION   
SELECT * FROM STAGING_CUSTOMERS WHERE CREDIT_LIMIT> 3500 AND COUNTRY_ID = 'US';  -- all fine
 
/*
-- ANALYZING THE DIMENSION TABLES FOR :- SEASON, YEAR, MONTHS, DEAPARTMENT, COUNTRY, CITY, PRODUCT, WAREHOUSES, CREDIT_TYPE, JOB_TYPE,
*/ 

-- SEASON, YEAR, MONTHS CHECKED FOR NULL -- ALL FINE
SELECT * FROM STAGING_DEPARTMENTS; -- ALL FINE
SELECT * FROM STAGING_COUNTRIES; -- ALL FINE
select * from STAGING_LOCATIONS; -- ALL FINE

select * from STAGING_PRODUCTS WHERE LIST_PRICE IS NULL OR MIN_PRICE IS NULL;
    SELECT * FROM STAGING_ORDER_ITEMS WHERE PRODUCT_ID IN (1769,3355,1770); -- IGNORED
select * from STAGING_WAREHOUSES; -- ALL FINE
select * from STAGING_JOBS; -- ALL FINE
select * from STAGING_CUSTOMERS where CREDIT_LIMIT is null; -- ALL FINE
-- EMPLOYEE HAS A NULL DEPARTMENT AND HAS NO OTHER IMPLICATIONS 
select * from STAGING_EMPLOYEES where DEPARTMENT_ID is null or JOB_ID is null;  -- IGNORED



